
Running test 1/5...

=== Output of bnb_frozen_lake.py ===
Best Path: [0, 1, 2, 6, 10, 14, 15]
Best Cost: 6
Execution Time: 0.000642 seconds
=============================

=== Output of ida_frozen_lake.py ===
Best Path: [0, 4, 8, 9, 13, 14, 15]
Best Cost: 6
Execution Time: 0.000281 seconds
=============================

Running test 2/5...

=== Output of bnb_frozen_lake.py ===
Best Path: [0, 1, 2, 6, 10, 14, 15]
Best Cost: 6
Execution Time: 0.000658 seconds
=============================

=== Output of ida_frozen_lake.py ===
Best Path: [0, 4, 8, 9, 13, 14, 15]
Best Cost: 6
Execution Time: 0.000286 seconds
=============================

Running test 3/5...

=== Output of bnb_frozen_lake.py ===
Best Path: [0, 1, 2, 6, 10, 14, 15]
Best Cost: 6
Execution Time: 0.000485 seconds
=============================

=== Output of ida_frozen_lake.py ===
Best Path: [0, 4, 8, 9, 13, 14, 15]
Best Cost: 6
Execution Time: 0.000283 seconds
=============================

Running test 4/5...

=== Output of bnb_frozen_lake.py ===
Best Path: [0, 1, 2, 6, 10, 14, 15]
Best Cost: 6
Execution Time: 0.000482 seconds
=============================

=== Output of ida_frozen_lake.py ===
Best Path: [0, 4, 8, 9, 13, 14, 15]
Best Cost: 6
Execution Time: 0.000279 seconds
=============================

Running test 5/5...

=== Output of bnb_frozen_lake.py ===
Best Path: [0, 1, 2, 6, 10, 14, 15]
Best Cost: 6
Execution Time: 0.000465 seconds
=============================

=== Output of ida_frozen_lake.py ===
Best Path: [0, 4, 8, 9, 13, 14, 15]
Best Cost: 6
Execution Time: 0.000256 seconds
=============================
